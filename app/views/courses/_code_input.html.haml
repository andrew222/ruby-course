.code_input
	= text_area :code, :text

:javascript
	$(document).ready(function(){
		var code_input_cm = CodeMirror.fromTextArea(document.getElementById('code_text'), {
			mode: "text/x-ruby",
			theme: "rubyblue",
			value: "",
			tabMode: "indent",
			lineNumbers: true,
			matchBrackets: true,
			autofocus: true,
			onKeyEvent: function(editor, event){
		    var event_type = event.type;
		    if(event_type == "keydown"){
		    	if(event.keyCode == 13){
		    		send_request_after_press_enter_key(editor);
		    	}
		    }
			},
			extraKeys: {
				Up: function(cm){
					window.cm = cm;
					// TODO display previous input history
					alert('up-arrow pressed');
					previous_line_code();
				},
				Down: function(cm){
					// TODO display next input history
				},
				"Alt-L": function(cm){
					cm.setValue("");
				},
				"Ctrl-Z": function(cm){
					cm.doc.undo()
				},
				"Ctrl-Shift-Z": function(cm){
					cm.doc.redo()
				}
			},
			indentUnit: 4
		});
		var send_request_after_press_enter_key = function(editor){
			var me = editor,
					last_line = result_cm.lastLine();
			$.ajax({
				type: "POST",
	      url: "/excute_code.json",
	      data: { code: me.doc.getValue() },
	      dataType: "json",
	      beforeSend: function(){
	      	console.log("before send data");
	      },
	      success: function(data) {
	      	result_cm.setLine(last_line, data.result.toString() + "\n")
	      },
				error: function(error){
					console.log(error);
				}
			})
		}

		var previous_line_code = function(line_numb){

		}

		var result_cm = CodeMirror.fromTextArea(document.getElementById('result_text'),{
			mode: "text/x-ruby",
			theme: "rubyblue",
			matchBrackets: true,
			readOnly: true
		});
	});